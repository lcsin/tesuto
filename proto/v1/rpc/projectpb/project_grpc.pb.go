// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: projectpb/project.proto

package projectpb

import (
	context "context"
	commonpb "github.com/lcsin/tesuto/proto/v1/rpc/commonpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProjectService_GetProjectByID_FullMethodName    = "/project.ProjectService/GetProjectByID"
	ProjectService_GetProjectByUID_FullMethodName   = "/project.ProjectService/GetProjectByUID"
	ProjectService_CreateProject_FullMethodName     = "/project.ProjectService/CreateProject"
	ProjectService_UpdateProjectByID_FullMethodName = "/project.ProjectService/UpdateProjectByID"
	ProjectService_DeleteProjectByID_FullMethodName = "/project.ProjectService/DeleteProjectByID"
)

// ProjectServiceClient is the client API for ProjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectServiceClient interface {
	// 根据项目id获取项目信息
	GetProjectByID(ctx context.Context, in *GetProjectByIDReq, opts ...grpc.CallOption) (*GetProjectByIDRep, error)
	// 根据用户id获取项目列表
	GetProjectByUID(ctx context.Context, in *GetProjectByUIDReq, opts ...grpc.CallOption) (*GetProjectByUIDRep, error)
	// 创建项目
	CreateProject(ctx context.Context, in *CreateProjectReq, opts ...grpc.CallOption) (*commonpb.Empty, error)
	// 更新项目信息
	UpdateProjectByID(ctx context.Context, in *UpdateProjectByIDReq, opts ...grpc.CallOption) (*commonpb.Empty, error)
	// 删除项目
	DeleteProjectByID(ctx context.Context, in *DeleteProjectByIDReq, opts ...grpc.CallOption) (*commonpb.Empty, error)
}

type projectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectServiceClient(cc grpc.ClientConnInterface) ProjectServiceClient {
	return &projectServiceClient{cc}
}

func (c *projectServiceClient) GetProjectByID(ctx context.Context, in *GetProjectByIDReq, opts ...grpc.CallOption) (*GetProjectByIDRep, error) {
	out := new(GetProjectByIDRep)
	err := c.cc.Invoke(ctx, ProjectService_GetProjectByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProjectByUID(ctx context.Context, in *GetProjectByUIDReq, opts ...grpc.CallOption) (*GetProjectByUIDRep, error) {
	out := new(GetProjectByUIDRep)
	err := c.cc.Invoke(ctx, ProjectService_GetProjectByUID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) CreateProject(ctx context.Context, in *CreateProjectReq, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, ProjectService_CreateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) UpdateProjectByID(ctx context.Context, in *UpdateProjectByIDReq, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, ProjectService_UpdateProjectByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) DeleteProjectByID(ctx context.Context, in *DeleteProjectByIDReq, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, ProjectService_DeleteProjectByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectServiceServer is the server API for ProjectService service.
// All implementations must embed UnimplementedProjectServiceServer
// for forward compatibility
type ProjectServiceServer interface {
	// 根据项目id获取项目信息
	GetProjectByID(context.Context, *GetProjectByIDReq) (*GetProjectByIDRep, error)
	// 根据用户id获取项目列表
	GetProjectByUID(context.Context, *GetProjectByUIDReq) (*GetProjectByUIDRep, error)
	// 创建项目
	CreateProject(context.Context, *CreateProjectReq) (*commonpb.Empty, error)
	// 更新项目信息
	UpdateProjectByID(context.Context, *UpdateProjectByIDReq) (*commonpb.Empty, error)
	// 删除项目
	DeleteProjectByID(context.Context, *DeleteProjectByIDReq) (*commonpb.Empty, error)
	mustEmbedUnimplementedProjectServiceServer()
}

// UnimplementedProjectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProjectServiceServer struct {
}

func (UnimplementedProjectServiceServer) GetProjectByID(context.Context, *GetProjectByIDReq) (*GetProjectByIDRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectByID not implemented")
}
func (UnimplementedProjectServiceServer) GetProjectByUID(context.Context, *GetProjectByUIDReq) (*GetProjectByUIDRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectByUID not implemented")
}
func (UnimplementedProjectServiceServer) CreateProject(context.Context, *CreateProjectReq) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedProjectServiceServer) UpdateProjectByID(context.Context, *UpdateProjectByIDReq) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectByID not implemented")
}
func (UnimplementedProjectServiceServer) DeleteProjectByID(context.Context, *DeleteProjectByIDReq) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectByID not implemented")
}
func (UnimplementedProjectServiceServer) mustEmbedUnimplementedProjectServiceServer() {}

// UnsafeProjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectServiceServer will
// result in compilation errors.
type UnsafeProjectServiceServer interface {
	mustEmbedUnimplementedProjectServiceServer()
}

func RegisterProjectServiceServer(s grpc.ServiceRegistrar, srv ProjectServiceServer) {
	s.RegisterService(&ProjectService_ServiceDesc, srv)
}

func _ProjectService_GetProjectByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProjectByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_GetProjectByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProjectByID(ctx, req.(*GetProjectByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetProjectByUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectByUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProjectByUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_GetProjectByUID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProjectByUID(ctx, req.(*GetProjectByUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).CreateProject(ctx, req.(*CreateProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_UpdateProjectByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).UpdateProjectByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_UpdateProjectByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).UpdateProjectByID(ctx, req.(*UpdateProjectByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_DeleteProjectByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).DeleteProjectByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_DeleteProjectByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).DeleteProjectByID(ctx, req.(*DeleteProjectByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectService_ServiceDesc is the grpc.ServiceDesc for ProjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "project.ProjectService",
	HandlerType: (*ProjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProjectByID",
			Handler:    _ProjectService_GetProjectByID_Handler,
		},
		{
			MethodName: "GetProjectByUID",
			Handler:    _ProjectService_GetProjectByUID_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _ProjectService_CreateProject_Handler,
		},
		{
			MethodName: "UpdateProjectByID",
			Handler:    _ProjectService_UpdateProjectByID_Handler,
		},
		{
			MethodName: "DeleteProjectByID",
			Handler:    _ProjectService_DeleteProjectByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "projectpb/project.proto",
}
